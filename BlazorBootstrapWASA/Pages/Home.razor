@page "/"
@using BlazorBootstrapWASA.Services
@inject HttpClient Http
@inject ThemeProvider ThemeProvider
@inject IJSRuntime JS
@using BlazorBootstrap
@using System.Globalization
@implements IDisposable

<h1>Lorem Ipsum</h1>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed viverra, nisl at pulvinar porttitor, purus lectus vehicula odio, nec vehicula elit dui at massa.</p>
<p>Praesent euismod, nibh nec bibendum consequat, est sapien ultricies urna, id ultrices mauris turpis sed augue.</p>

<h2>Weather in Warsaw</h2>
@if (weather == null)
{
    <p>Loading weather data...</p>
}
else
{
    <table class="table table-striped theme-table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temperature (°C)</th>
                <th>Humidity (%)</th>
                <th>Pressure (mb)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var w in weather)
            {
                <tr>
                    <td>@w.Date</td>
                    <td>@w.Temperature</td>
                    <td>@w.Humidity</td>
                    <td>@w.Pressure</td>
                    <td>@w.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (weather == null)
{
    <p>Loading weather data...</p>
}
else
{
    <h3>Temperature Chart</h3>
    <LineChart @ref="lineChart" Width="800" Height="300" />
    <table class="table table-striped theme-table">
    </table>
}


<h2>More Info (Accordion)</h2>
<div class="accordion mb-4" id="demoAccordion">
    @for (int i = 1; i <= 3; i++)
    {
        <div class="accordion-item">
            <h2 class="accordion-header" id="heading@i">
                <button class="accordion-button @(i != 1 ? "collapsed" : "")"
                        type="button" data-bs-toggle="collapse"
                        data-bs-target="#collapse@i" aria-expanded="@(i == 1 ? "true" : "false")"
                        aria-controls="collapse@i">
                    Accordion Item #@i
                </button>
            </h2>
            <div id="collapse@i"
                 class="accordion-collapse collapse @(i == 1 ? "show" : "")"
                 aria-labelledby="heading@i" data-bs-parent="#demoAccordion">
                <div class="accordion-body">
                    This is the body of item #@i.
                </div>
            </div>
        </div>
    }
</div>

<h2>Theme Cards</h2>
<div class="row mb-4">
    @foreach (var t in new[] { "Light", "Dark", "Blue" })
    {
        <div class="col-md-4 mb-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@t Theme</h5>
                    <p class="card-text">Apply the @t theme via Blazor.</p>
                    <button class="btn btn-primary" @onclick="() => ApplyTheme(t)">
                        Apply @t
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<h2>Choose a City</h2>
<ul class="list-group mb-3">
    @foreach (var city in new[] { "Warsaw", "Kraków", "Gdańsk" })
    {
        <li class="list-group-item @(city == selectedCity ? "active" : "")"
            @onclick="() => selectedCity = city">
            @city
        </li>
    }
</ul>
<p>Selected city: <strong>@selectedCity</strong></p>

@code {
    private List<WeatherData>? weather;
    private string selectedCity = "Warsaw";

    private LineChart? lineChart;
    private ChartData? chartData;
    private LineChartOptions? lineChartOptions;

    protected override async Task OnInitializedAsync()
    {
        weather = await Http.GetFromJsonAsync<List<WeatherData>>("sample-data/weather.json");

        // Prepare chart data and options if weather data exists
        if (weather != null)
        {
            var primary = await JS.InvokeAsync<string>("getCssColor", "--bs-primary");
            var textColor = await JS.InvokeAsync<string>("getCssColor", "--bs-body-color");
			// var backgroundColor = await JS.InvokeAsync<string>("getCssColor", "--bs-body-bg");
            chartData = new ChartData
            {
                Labels = weather.Select(w => w.Date).ToList(),
                Datasets = new List<IChartDataset>
                {
                    new LineChartDataset
                    {
                        Label = "Temperature (°C)",
                        Data = weather.Select(w => w.Temperature).ToList(),
                        BorderColor = primary.Trim(),
                        BackgroundColor = ConvertSemiTransparent(primary.Trim(), 0.2),
                        BorderWidth = 4.0,
                        Fill = true
                    }
                }
            };

            // No title property, just set responsive to true
            lineChartOptions = new LineChartOptions
            {
                Responsive = true
            };
        }
    }

    protected override void OnInitialized()
    {
        ThemeProvider.OnThemeChanged += OnThemeChangedHandler;
    }

    private async void OnThemeChangedHandler()
    {
        await InvokeAsync(UpdateChartColorsAsync);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (lineChart != null && chartData != null && lineChartOptions != null)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
    }

    protected async Task ApplyTheme(string themeName)
    {
        ThemeProvider.SetTheme($"theme-{themeName.ToLower()}.css");
        await JS.InvokeVoidAsync("setBootstrapTheme", themeName.ToLower());
        await UpdateChartColorsAsync();
    }

    public class WeatherData
    {
        public string Date { get; set; } = default!;
        public double? Temperature { get; set; }
        public double Humidity { get; set; }
        public int Pressure { get; set; }
        public string Summary { get; set; } = default!;
        public DateTime DateAsDateTime => DateTime.Parse(Date);
    }

    static string ConvertSemiTransparent(string hex, double opacity)
    {
        // hex bez '#'
        hex = hex.TrimStart('#');
        if (hex.Length == 6)
        {
            var r = int.Parse(hex.Substring(0, 2), NumberStyles.HexNumber);
            var g = int.Parse(hex.Substring(2, 2), NumberStyles.HexNumber);
            var b = int.Parse(hex.Substring(4, 2), NumberStyles.HexNumber);
            return $"rgba({r},{g},{b},{opacity})";
        }
        return $"rgba(0,0,0,{opacity})";
    }

    private async Task UpdateChartColorsAsync()
    {
        var primary = (await JS.InvokeAsync<string>("getCssColor", "--bs-primary")).Trim();
        var bg = ConvertSemiTransparent(primary, 0.2);

        if (chartData?.Datasets?.FirstOrDefault() is LineChartDataset ds)
        {
            ds.BorderColor = primary;
            ds.BackgroundColor = bg;
            await lineChart!.UpdateAsync(chartData, lineChartOptions!);
        }
    }

    public void Dispose()
    {
        ThemeProvider.OnThemeChanged -= OnThemeChangedHandler;
    }
}
